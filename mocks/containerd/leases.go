// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/containerd/containerd/leases (interfaces: Manager)
//
// Generated by this command:
//
//	mockgen -destination mocks/containerd/leases.go -package containerd -mock_names Manager=MockLeasesManager github.com/containerd/containerd/leases Manager
//
// Package containerd is a generated GoMock package.
package containerd

import (
	context "context"
	reflect "reflect"

	leases "github.com/containerd/containerd/leases"
	gomock "go.uber.org/mock/gomock"
)

// MockLeasesManager is a mock of Manager interface.
type MockLeasesManager struct {
	ctrl     *gomock.Controller
	recorder *MockLeasesManagerMockRecorder
}

// MockLeasesManagerMockRecorder is the mock recorder for MockLeasesManager.
type MockLeasesManagerMockRecorder struct {
	mock *MockLeasesManager
}

// NewMockLeasesManager creates a new mock instance.
func NewMockLeasesManager(ctrl *gomock.Controller) *MockLeasesManager {
	mock := &MockLeasesManager{ctrl: ctrl}
	mock.recorder = &MockLeasesManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeasesManager) EXPECT() *MockLeasesManagerMockRecorder {
	return m.recorder
}

// AddResource mocks base method.
func (m *MockLeasesManager) AddResource(arg0 context.Context, arg1 leases.Lease, arg2 leases.Resource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddResource", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddResource indicates an expected call of AddResource.
func (mr *MockLeasesManagerMockRecorder) AddResource(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResource", reflect.TypeOf((*MockLeasesManager)(nil).AddResource), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockLeasesManager) Create(arg0 context.Context, arg1 ...leases.Opt) (leases.Lease, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(leases.Lease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLeasesManagerMockRecorder) Create(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLeasesManager)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockLeasesManager) Delete(arg0 context.Context, arg1 leases.Lease, arg2 ...leases.DeleteOpt) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLeasesManagerMockRecorder) Delete(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLeasesManager)(nil).Delete), varargs...)
}

// DeleteResource mocks base method.
func (m *MockLeasesManager) DeleteResource(arg0 context.Context, arg1 leases.Lease, arg2 leases.Resource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResource", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResource indicates an expected call of DeleteResource.
func (mr *MockLeasesManagerMockRecorder) DeleteResource(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockLeasesManager)(nil).DeleteResource), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockLeasesManager) List(arg0 context.Context, arg1 ...string) ([]leases.Lease, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]leases.Lease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockLeasesManagerMockRecorder) List(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLeasesManager)(nil).List), varargs...)
}

// ListResources mocks base method.
func (m *MockLeasesManager) ListResources(arg0 context.Context, arg1 leases.Lease) ([]leases.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResources", arg0, arg1)
	ret0, _ := ret[0].([]leases.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResources indicates an expected call of ListResources.
func (mr *MockLeasesManagerMockRecorder) ListResources(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResources", reflect.TypeOf((*MockLeasesManager)(nil).ListResources), arg0, arg1)
}
