// Code generated by MockGen. DO NOT EDIT.
// Source: client/runner/containerd/interface.go
//
// Generated by this command:
//
//	mockgen -source client/runner/containerd/interface.go -destination mocks/containerd/client.go -package containerd Client
//
// Package containerd is a generated GoMock package.
package containerd

import (
	context "context"
	reflect "reflect"

	containerd "github.com/containerd/containerd"
	leases "github.com/containerd/containerd/leases"
	snapshots "github.com/containerd/containerd/snapshots"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// GetImage mocks base method.
func (m *MockClient) GetImage(ctx context.Context, imageRef string) (containerd.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", ctx, imageRef)
	ret0, _ := ret[0].(containerd.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockClientMockRecorder) GetImage(ctx, imageRef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockClient)(nil).GetImage), ctx, imageRef)
}

// LeasesService mocks base method.
func (m *MockClient) LeasesService() leases.Manager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeasesService")
	ret0, _ := ret[0].(leases.Manager)
	return ret0
}

// LeasesService indicates an expected call of LeasesService.
func (mr *MockClientMockRecorder) LeasesService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeasesService", reflect.TypeOf((*MockClient)(nil).LeasesService))
}

// Pull mocks base method.
func (m *MockClient) Pull(ctx context.Context, ref string, opts ...containerd.RemoteOpt) (containerd.Image, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, ref}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Pull", varargs...)
	ret0, _ := ret[0].(containerd.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pull indicates an expected call of Pull.
func (mr *MockClientMockRecorder) Pull(ctx, ref any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, ref}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockClient)(nil).Pull), varargs...)
}

// SnapshotService mocks base method.
func (m *MockClient) SnapshotService(snapshotterName string) snapshots.Snapshotter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotService", snapshotterName)
	ret0, _ := ret[0].(snapshots.Snapshotter)
	return ret0
}

// SnapshotService indicates an expected call of SnapshotService.
func (mr *MockClientMockRecorder) SnapshotService(snapshotterName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotService", reflect.TypeOf((*MockClient)(nil).SnapshotService), snapshotterName)
}
