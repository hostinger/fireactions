// Code generated by MockGen. DO NOT EDIT.
// Source: commands/cmd.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	fireactions "github.com/hostinger/fireactions"
)

// MockfireactionsClient is a mock of fireactionsClient interface.
type MockfireactionsClient struct {
	ctrl     *gomock.Controller
	recorder *MockfireactionsClientMockRecorder
}

// MockfireactionsClientMockRecorder is the mock recorder for MockfireactionsClient.
type MockfireactionsClientMockRecorder struct {
	mock *MockfireactionsClient
}

// NewMockfireactionsClient creates a new mock instance.
func NewMockfireactionsClient(ctrl *gomock.Controller) *MockfireactionsClient {
	mock := &MockfireactionsClient{ctrl: ctrl}
	mock.recorder = &MockfireactionsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfireactionsClient) EXPECT() *MockfireactionsClientMockRecorder {
	return m.recorder
}

// GetMicroVM mocks base method.
func (m *MockfireactionsClient) GetMicroVM(ctx context.Context, vmid string) (*fireactions.MicroVM, *fireactions.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMicroVM", ctx, vmid)
	ret0, _ := ret[0].(*fireactions.MicroVM)
	ret1, _ := ret[1].(*fireactions.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMicroVM indicates an expected call of GetMicroVM.
func (mr *MockfireactionsClientMockRecorder) GetMicroVM(ctx, vmid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMicroVM", reflect.TypeOf((*MockfireactionsClient)(nil).GetMicroVM), ctx, vmid)
}

// GetPool mocks base method.
func (m *MockfireactionsClient) GetPool(ctx context.Context, name string) (*fireactions.Pool, *fireactions.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPool", ctx, name)
	ret0, _ := ret[0].(*fireactions.Pool)
	ret1, _ := ret[1].(*fireactions.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPool indicates an expected call of GetPool.
func (mr *MockfireactionsClientMockRecorder) GetPool(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPool", reflect.TypeOf((*MockfireactionsClient)(nil).GetPool), ctx, name)
}

// ListMicroVMs mocks base method.
func (m *MockfireactionsClient) ListMicroVMs(ctx context.Context, pool string) (*fireactions.MicroVMs, *fireactions.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMicroVMs", ctx, pool)
	ret0, _ := ret[0].(*fireactions.MicroVMs)
	ret1, _ := ret[1].(*fireactions.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMicroVMs indicates an expected call of ListMicroVMs.
func (mr *MockfireactionsClientMockRecorder) ListMicroVMs(ctx, pool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMicroVMs", reflect.TypeOf((*MockfireactionsClient)(nil).ListMicroVMs), ctx, pool)
}

// ListPools mocks base method.
func (m *MockfireactionsClient) ListPools(ctx context.Context, opts *fireactions.ListOptions) (fireactions.Pools, *fireactions.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPools", ctx, opts)
	ret0, _ := ret[0].(fireactions.Pools)
	ret1, _ := ret[1].(*fireactions.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPools indicates an expected call of ListPools.
func (mr *MockfireactionsClientMockRecorder) ListPools(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPools", reflect.TypeOf((*MockfireactionsClient)(nil).ListPools), ctx, opts)
}

// PausePool mocks base method.
func (m *MockfireactionsClient) PausePool(ctx context.Context, name string) (*fireactions.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PausePool", ctx, name)
	ret0, _ := ret[0].(*fireactions.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PausePool indicates an expected call of PausePool.
func (mr *MockfireactionsClientMockRecorder) PausePool(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PausePool", reflect.TypeOf((*MockfireactionsClient)(nil).PausePool), ctx, name)
}

// Reload mocks base method.
func (m *MockfireactionsClient) Reload(ctx context.Context) (*fireactions.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", ctx)
	ret0, _ := ret[0].(*fireactions.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reload indicates an expected call of Reload.
func (mr *MockfireactionsClientMockRecorder) Reload(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockfireactionsClient)(nil).Reload), ctx)
}

// ResumePool mocks base method.
func (m *MockfireactionsClient) ResumePool(ctx context.Context, name string) (*fireactions.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumePool", ctx, name)
	ret0, _ := ret[0].(*fireactions.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumePool indicates an expected call of ResumePool.
func (mr *MockfireactionsClientMockRecorder) ResumePool(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumePool", reflect.TypeOf((*MockfireactionsClient)(nil).ResumePool), ctx, name)
}

// ScalePool mocks base method.
func (m *MockfireactionsClient) ScalePool(ctx context.Context, name string) (*fireactions.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScalePool", ctx, name)
	ret0, _ := ret[0].(*fireactions.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScalePool indicates an expected call of ScalePool.
func (mr *MockfireactionsClientMockRecorder) ScalePool(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScalePool", reflect.TypeOf((*MockfireactionsClient)(nil).ScalePool), ctx, name)
}
